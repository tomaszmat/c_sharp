/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : SCI2.h
**     Project   : cik1
**     Processor : MC9S12NE64CPV
**     Component : Init_SCI
**     Version   : Component 01.075, Driver 01.09, CPU db: 2.87.134
**     Compiler  : CodeWarrior HC12 C Compiler
**     Date/Time : 2017-03-06, 16:35
**     Abstract  :
**          This file implements the SCI (SCI0) module initialization
**          according to the Peripheral Initialization Component settings,
**          and defines interrupt service routines prototypes.
**          The SCI includes these distinctive features:
**          • Full-duplex operation
**          • Standard mark/space non-return-to-zero (NRZ) format
**          • Selectable IrDA 1.4 return-to-zero-inverted (RZI) format
**          with programmable pulse widths
**          • 13-bit baud rate selection
**          • Programmable 8-bit or 9-bit data format
**          • Separately enabled transmitter and receiver
**          • Programmable transmitter output parity
**          • Two receiver wakeup methods:
**          – Idle line wakeup
**          – Address mark wakeup
**          • Interrupt-driven operation with eight flags:
**          – Transmitter empty
**          – Transmission complete
**          – Receiver full
**          – Idle receiver input
**          – Receiver overrun
**          – Noise error
**          – Framing error
**          – Parity error
**          • Receiver framing error detection
**          • Hardware parity checking
**          • 1/16 bit-time noise detection
**     Settings  :
**          Component name                                 : SCI2
**          Device                                         : SCI0
**          Settings
**            Clock setting
**              Baud rate divisor                          : 14
**              Baud rate                                  : 111607.14 Bd
**            Loop mode                                    : Disabled
**            Break character length                       : 10 or 11 bits
**            Receiver wake up mode                        : normal operation
**            Wake up                                      : by idle line
**            Idle Line counting                           : After start bit
**            Stop in Wait mode                            : no
**            Parity                                       : none
**            Data format                                  : 8 bits
**            Infrared module                              : Disabled
**            Transmitter Narrow Pulse                     : 3/16
**          Pins
**            RxD pin                                      : PS0_SCI0_RXD
**            RxD pin signal                               : 
**            TxD pin                                      : PS1_SCI0_TXD
**            TxD pin signal                               : 
**          Interrupts
**            Interrupt                                    : Vsci0
**            Receiver full interrupt                      : Enabled
**            Transmitter empty interrupt                  : Disabled
**            Transmitter complete interrupt               : Disabled
**            Idle Line interrupt                          : Disabled
**            Interrupt priority                           : 1
**            ISR name                                     : UART_Rx
**          Initialization
**            Call Init in CPU init. code                  : yes
**            Transmitter                                  : Enabled
**            Receiver                                     : Enabled
**     Contents  :
**         Init - void SCI2_Init(void);
**
**     Copyright : 1997 - 2010 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __SCI2
#define __SCI2

/* MODULE SCI2. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */

#include "Cpu.h"


void SCI2_Init(void);
/*
** ===================================================================
**     Method      :  SCI2_Init (component Init_SCI)
**
**     Description :
**         This method initializes registers of the SCI module
**         according to this Peripheral Initialization Component settings.
**         Call this method in user code to initialize the module.
**         By default, the method is called by PE automatically; see
**         "Call Init method" property of the component for more details.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/


/*
** ===================================================================
** The interrupt service routine must be implemented by user in one
** of the user modules (see SCI2.c file for more information).
** ===================================================================
*/
#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void UART_Rx(void);
#pragma CODE_SEG DEFAULT
/* END SCI2. */

#endif /* ifndef __SCI2 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.02 [04.44]
**     for the Freescale HCS12 series of microcontrollers.
**
** ###################################################################
*/
